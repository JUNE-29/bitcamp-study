package com.eomcs.util;

import java.util.Arrays;

public class Stack<E> implements Cloneable{
  
  private static final int DEFAULT_CAPACITY = 10;

  Object[] elementData;
  int size;
  
  public Stack() {
    this.elementData = new Object[DEFAULT_CAPACITY];
    this.size = 0;
  }
  
  public void push(E value) {
    if(this.size == elementData.length) {
      grow();
    }
    this.elementData[size++] = value;
    //size++;
  }
  
  private void grow() {
    // 내부에서 쓰일 메소드이기 때문에 private로!
    this.elementData = Arrays.copyOf(elementData, newCapacity());
  }
  
  private int newCapacity() {
    int oldCapacity = elementData.length;
    return oldCapacity + (oldCapacity >> 1);
  }
  
  public Object pop() {
    if(this.empty())
      return null;
    Object value = this.elementData[--this.size];
    this.elementData[this.size] = null;
    // 객체에 주소가 남아있지 않도록 하겠다. 가비지가 생기도록.
    return value;
    // 전위연산자를 이용하여 size를 줄이고 찾는다.
  }
  
  public boolean empty() {
    return this.size == 0;
  }
  // Object.clone()의 'shallow copy' 이용하여 스택 객체 복사하기
  // => 객체의 인스턴스 변수를 그대로 복제한다.
  // => 인스턴스 변수가 가리키는 객체는 복제하지 않는다.
  // 
  // 문제점?
  // => 따라서 인스턴스 변수인 elementData가 가리키는 배열은 복제하지 않는다.
  // => 그래서 배열의 값을 배꾸면 원본 스택에도 영향을 끼친다.

  @Override
  public Stack clone() {
    try {
    return (Stack)super.clone();
    // 예외가 발생할 수 있는 메소드를 담는다.
    
    } catch (CloneNotSupportedException ex) {
      // 위에 있는 try 식에 문제가 발생하면 여기서 처리
      // Object의 clone() 메서드는
      // 복제가 허용된 객체의 대해서만 해당 인스턴스 변수를 복제한다.
      // 복제가 허용되지 않은 객체에 대해서 clone()을 호출하면
      // CloneNotSupportedException 실행 오류가 발생한다.
      // 해결책?
      // => 해당 클래스의 객체를 복제할 수 있다고 표시하라! 복제 가능 표시하기! 
      // => 방법: Cloneable 인터페이스를 지정해야 한다.
      //    예) class MY implements Cloneable {..}
      
      System.out.println(ex);
      // == System.out.println(ex.toString()); 같다.
      return null;
    }
  }
}
