package com.eomcs.lms;

import java.io.File;
import java.io.FileReader;
import java.io.FileWriter;
import java.io.IOException;
import java.util.ArrayDeque;
import java.util.ArrayList;
import java.util.Deque;
import java.util.HashMap;
import java.util.Iterator;
import java.util.LinkedList;
import java.util.Queue;
import java.util.Scanner;
import com.eomcs.lms.domain.Board;
import com.eomcs.lms.domain.Lesson;
import com.eomcs.lms.domain.Member;
import com.eomcs.lms.handler.BoardAddCommand;
import com.eomcs.lms.handler.BoardDeleteCommand;
import com.eomcs.lms.handler.BoardDetailCommand;
import com.eomcs.lms.handler.BoardListCommand;
import com.eomcs.lms.handler.BoardUpdateCommand;
import com.eomcs.lms.handler.Command;
import com.eomcs.lms.handler.ComputePlusCommand;
import com.eomcs.lms.handler.HelloCommand;
import com.eomcs.lms.handler.LessonAddCommand;
import com.eomcs.lms.handler.LessonDeleteCommand;
import com.eomcs.lms.handler.LessonDetailCommand;
import com.eomcs.lms.handler.LessonListCommand;
import com.eomcs.lms.handler.LessonUpdateCommand;
import com.eomcs.lms.handler.MemberAddCommand;
import com.eomcs.lms.handler.MemberDeleteCommand;
import com.eomcs.lms.handler.MemberDetailCommand;
import com.eomcs.lms.handler.MemberListCommand;
import com.eomcs.lms.handler.MemberUpdateCommand;
import com.eomcs.util.Prompt;
import com.google.gson.Gson;

public class App {

  static Scanner keyboard = new Scanner(System.in);

  static Deque<String> commandStack = new ArrayDeque<>();
  static Queue<String> commandQueue = new LinkedList<>();

  static List<Board> boardList = new LinkedList<>();
  static List<Lesson> lessonList = new ArrayList<>();
  static List<Member> memberList = new LinkedList<>();

  public static void main(String[] args) {

    // 파일에서 데이터 로딩
    loadLessonData();
    loadMemberData();
    loadBoardData();

    Prompt prompt = new Prompt(keyboard);
    HashMap<String, Command> commandMap = new HashMap<>();

    commandMap.put("/board/add", new BoardAddCommand(prompt, boardList));
    commandMap.put("/board/list", new BoardListCommand(boardList));
    commandMap.put("/board/detail", new BoardDetailCommand(prompt, boardList));
    commandMap.put("/board/update", new BoardUpdateCommand(prompt, boardList));
    commandMap.put("/board/delete", new BoardDeleteCommand(prompt, boardList));

    commandMap.put("/lesson/add", new LessonAddCommand(prompt, lessonList));
    commandMap.put("/lesson/list", new LessonListCommand(lessonList));
    commandMap.put("/lesson/detail", new LessonDetailCommand(prompt, lessonList));
    commandMap.put("/lesson/update", new LessonUpdateCommand(prompt, lessonList));
    commandMap.put("/lesson/delete", new LessonDeleteCommand(prompt, lessonList));

    commandMap.put("/member/add", new MemberAddCommand(prompt, memberList));
    commandMap.put("/member/list", new MemberListCommand(memberList));
    commandMap.put("/member/detail", new MemberDetailCommand(prompt, memberList));
    commandMap.put("/member/update", new MemberUpdateCommand(prompt, memberList));
    commandMap.put("/member/delete", new MemberDeleteCommand(prompt, memberList));

    commandMap.put("/hello", new HelloCommand(prompt));
    commandMap.put("/compute/plus", new ComputePlusCommand(prompt));

    String command;

    while (true) {
      System.out.print("\n명령> ");
      command = keyboard.nextLine();

      if (command.length() == 0)
        continue;
      // 엔터를치게 되면 다시 명령을 받게 한다.

      if (command.equals("quit")) {
        System.out.println("안녕!");
        break;
      } else if (command.equals("history")) {
        //
        printCommandHistory(commandStack.iterator());
        // 명령 내용을 역순으로 출력
        continue;
      } else if (command.equals("history2")) {
        printCommandHistory(commandQueue.iterator());
        // 명령 내용을 차례대로 출력
        continue;
      }

      commandStack.push(command);

      commandQueue.offer(command);

      Command commandHandler = commandMap.get(command);

      if (commandHandler != null) {
        // 만약에 찾았다면
        try {
          commandHandler.execute();
          // 명령어를 처리한다.
        } catch (Exception e) {
          // 명령어를 처리하다가 오류가 발생하면
          System.out.printf("명령어 실행중 오류 발생: %s \n", e.getMessage());
        }
      } else {
        // 명령어를 못찾았으면 이렇게 출력한다.
        System.out.println("실행할 수 없는 명령입니다.");
      }
    }

    keyboard.close();


    // 데이터를 파일에 저장(보관)한다.
    saveLessonData();
    saveMemberData();
    saveBoardData();

  } // main()

  private static void printCommandHistory(Iterator<String> iterator) {
    int count = 0;
    while (iterator.hasNext()) {
      System.out.println(iterator.next());
      // 값을 꺼내서 출력한다.
      count++;

      if ((count % 5) == 0) {
        // 5의 배수 -> 5번째 마다 표시를 주기 위해서
        System.out.print(":");
        String str = keyboard.nextLine();
        if (str.equalsIgnoreCase("q")) {
          // q를 입력하면 멈추고 명령창으로
          break;
        }
      }
    }
  }

  private static void loadLessonData() {

    File file = new File("./lesson.json");
    FileReader in = null;

    try {
      in = new FileReader(file);

      // 파일에서 읽은 JSON 데이터의 문자열을 가지고 객체를 만든다.
      Lesson[] lessons = new Gson().fromJson(in, Lesson[].class);
      // Json 형식으로 되있는 파일 데이터를 읽어서 지정된 배열 객체를 만들어서 리턴한다.
      // 그리고 반본문을 돌면서 저장한다.
      for (Lesson lesson : lessons) {
        lessonList.add(lesson);
      }

      System.out.printf("총 %d 개의 수업 데이터를 로딩했습니다.\n", lessonList.size());

    } catch (Exception e) {
      // 모든 예외를 다 받는다
      System.out.println("파일 읽기 중 오류 발생! - " + e.getMessage());

    } finally {
      try {
        in.close();
      } catch (Exception e) {
      }
    }
  }

  private static void saveLessonData() {
    // 데이터가 보관된 파일의 정보를 준비한다.
    File file = new File("./lesson.json");

    FileWriter out = null;

    try {

      out = new FileWriter(file);
      out.write(new Gson().toJson(lessonList));
      // 객체를 제이슨 형식의 문자열로 만들어서 리턴한다.
      System.out.printf("총 %d 개의 게시판 데이터를 저장했습니다.\n", lessonList.size());

    } catch (IOException e) {
      System.out.println("파일 쓰기 중 오류 발생! - " + e.getMessage());

    } finally {
      try {
        out.close();
      } catch (IOException e) {
        // FileWriter를 닫을 때 발생하는 예외는 무시한다.
      }
    }
  }

  private static void loadMemberData() {
    // 데이터가 보관된 파일의 정보를 준비한다.
    File file = new File("./member.json");

    FileReader in = null;
    Scanner dataScan = null;

    try {
      in = new FileReader(file);

      // 파일에서 읽은 JSON 데이터의 문자열을 가지고 객체를 만든다.

      Member[] members = new Gson().fromJson(in, Member[].class);
      // Gson 객체를 생성하고 Board 배열을 만들어서
      for (Member member : members) {
        memberList.add(member);
      }
      System.out.printf("총 %d 개의 회원 데이터를 로딩했습니다.\n", memberList.size());

    } catch (Exception e) {
      // 모든 예외를 다 받는다
      System.out.println("파일 읽기 중 오류 발생! - " + e.getMessage());

    } finally {
      try {
        in.close();
      } catch (Exception e) {
      }
    }
  }

  private static void saveMemberData() {
    // 데이터가 보관된 파일의 정보를 준비한다.
    File file = new File("./member.json");
    FileWriter out = null;

    try {
      out = new FileWriter(file);
      out.write(new Gson().toJson(memberList));
      System.out.printf("총 %d 개의 회원 데이터를 저장했습니다.\n", memberList.size());

    } catch (IOException e) {
      System.out.println("파일 쓰기 중 오류 발생! - " + e.getMessage());

    } finally {
      try {
        out.close();
      } catch (IOException e) {
      }
    }
  }

  private static void loadBoardData() {
    File file = new File("./board.json");
    FileReader in = null;

    try {
      in = new FileReader(file);

      // 파일에서 읽은 JSON 데이터의 문자열을 가지고 객체를 만든다.

      Board[] boards = new Gson().fromJson(in, Board[].class);
      // Gson 객체를 생성하고 Board 배열을 만들어서
      for (Board board : boards) {
        boardList.add(board);
      }

      System.out.printf("총 %d 개의 게시판 데이터를 로딩했습니다.\n", boardList.size());

    } catch (Exception e) {
      // 모든 예외를 다 받는다
      System.out.println("파일 읽기 중 오류 발생! - " + e.getMessage());

    } finally {
      try {
        in.close();
      } catch (Exception e) {
      }
    }
  }

  private static void saveBoardData() {
    // 데이터가 보관된 파일의 정보를 준비한다.
    File file = new File("./board.json");

    FileWriter out = null;

    try {
      // 파일의 데이터를 저장할 때 사용할 도구를 준비한다.
      out = new FileWriter(file);

      Gson json = new Gson();
      out.write(json.toJson(boardList));

      System.out.printf("총 %d 개의 게시판 데이터를 저장했습니다.\n", boardList.size());

    } catch (IOException e) {
      System.out.println("파일 쓰기 중 오류 발생! -" + e.getMessage());
    } finally {
      try {
        out.close();
      } catch (Exception e) {

      }
    }
  }


}
